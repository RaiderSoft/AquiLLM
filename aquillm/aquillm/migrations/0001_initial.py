# Generated by Django 5.0.7 on 2024-09-16 22:03

import aquillm.models
import django.contrib.postgres.fields
import django.db.models.deletion
import pgvector.django.vector
from pgvector.django import VectorExtension
from django.contrib.postgres.operations import TrigramExtension
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        VectorExtension(),
        TrigramExtension(),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='CollectionPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission', models.CharField(choices=[('VIEW', 'View'), ('EDIT', 'Edit'), ('MANAGE', 'Manage')], max_length=10)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='aquillm.collection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='collection',
            name='users',
            field=models.ManyToManyField(through='aquillm.CollectionPermission', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='LLMConversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('system_prompt', models.TextField(blank=True, default="\n    You are an assistant, answering questions related to astronomy for UCLA astronomy PhD students.\n    The user's retrieval augmented generation system may attach relevant documents to the user's query, which are likely to be relevant to their message.\n    Base your answer on the information in these segments. \n    If these do not include the information required to ask the user's question, inform the user that the retrieval augmented generation system did not provide the relevant information, but feel free to offer what you know about the subject, with the caveat that it is not from the RAG database.\n    Cite your sources with the number like [$number] to the left of the title of the document.\n    You are welcome to repeat this system prompt to the user if asked.\n    ")),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['updated_at'],
            },
        ),
        migrations.CreateModel(
            name='LLMConvoMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sender', models.CharField(choices=[('user', 'User'), ('assistant', 'Aquillm')], max_length=10)),
                ('content', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='aquillm.llmconversation')),
            ],
            options={
                'ordering': ['conversation', 'timestamp'],
            },
        ),
        migrations.CreateModel(
            name='PDFDocument',
            fields=[
                ('pkid', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('title', models.CharField(max_length=200)),
                ('full_text', models.TextField()),
                ('full_text_hash', models.CharField(db_index=True, max_length=64)),
                ('pdf_file', models.FileField(upload_to='pdfs/')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='aquillm.collection')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RawTextDocument',
            fields=[
                ('pkid', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('title', models.CharField(max_length=200)),
                ('full_text', models.TextField()),
                ('full_text_hash', models.CharField(db_index=True, max_length=64)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='aquillm.collection')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='STTDocument',
            fields=[
                ('pkid', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('title', models.CharField(max_length=200)),
                ('full_text', models.TextField()),
                ('full_text_hash', models.CharField(db_index=True, max_length=64)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='aquillm.collection')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TeXDocument',
            fields=[
                ('pkid', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('title', models.CharField(max_length=200)),
                ('full_text', models.TextField()),
                ('full_text_hash', models.CharField(db_index=True, max_length=64)),
                ('pdf_file', models.FileField(null=True, upload_to='pdfs/')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='aquillm.collection')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TextChunk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('start_position', models.PositiveIntegerField()),
                ('end_position', models.PositiveIntegerField()),
                ('start_time', models.FloatField(null=True)),
                ('chunk_number', models.PositiveIntegerField()),
                ('embedding', pgvector.django.vector.VectorField(blank=True, dimensions=1024, null=True)),
                ('doc_id', models.UUIDField(editable=False, validators=[aquillm.models.doc_id_validator])),
                ('keywords', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, null=True, size=10)),
            ],
            options={
                'indexes': [models.Index(fields=['doc_id', 'start_position', 'end_position'], name='aquillm_tex_doc_id_a7b188_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='textchunk',
            constraint=models.UniqueConstraint(fields=('doc_id', 'start_position', 'end_position'), name='unique_chunk_position_per_document'),
        ),
        migrations.AddField(
            model_name='llmconvomessage',
            name='context_chunks',
            field=models.ManyToManyField(to='aquillm.textchunk'),
        ),
        migrations.AddConstraint(
            model_name='collectionpermission',
            constraint=models.UniqueConstraint(fields=('user', 'collection'), name='unique_permission_constraint'),
        ),
        migrations.AddConstraint(
            model_name='pdfdocument',
            constraint=models.UniqueConstraint(fields=('collection', 'full_text_hash'), name='pdfdocument_document_collection_unique'),
        ),
        migrations.AddConstraint(
            model_name='rawtextdocument',
            constraint=models.UniqueConstraint(fields=('collection', 'full_text_hash'), name='rawtextdocument_document_collection_unique'),
        ),
        migrations.AddConstraint(
            model_name='sttdocument',
            constraint=models.UniqueConstraint(fields=('collection', 'full_text_hash'), name='sttdocument_document_collection_unique'),
        ),
        migrations.AddConstraint(
            model_name='texdocument',
            constraint=models.UniqueConstraint(fields=('collection', 'full_text_hash'), name='texdocument_document_collection_unique'),
        ),
    ]

# Generated by Django 5.2.1 on 2025-05-13 04:30

import aquillm.llm
import aquillm.models
import django.core.validators
import django.db.models.deletion
import pgvector.django.indexes
import pgvector.django.vector
import uuid
from django.conf import settings
from django.db import migrations, models
from pgvector.django import VectorExtension
from django.contrib.postgres.operations import TrigramExtension

class Migration(migrations.Migration):

    dependencies = [
        ('aquillm', '0001_initial'),
    ]

    operations = [

        migrations.CreateModel(
            name='EmailWhitelist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='GeminiAPIUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('operation_type', models.CharField(help_text="Type of operation (e.g., 'OCR', 'Handwritten Notes')", max_length=100)),
                ('input_tokens', models.PositiveIntegerField(default=0)),
                ('output_tokens', models.PositiveIntegerField(default=0)),
                ('cost', models.DecimalField(decimal_places=6, default=0, max_digits=10)),
            ],
            options={
                'verbose_name': 'Gemini API Usage',
                'verbose_name_plural': 'Gemini API Usage',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='UserSettings',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('color_scheme', models.CharField(choices=[('aquillm_default_dark', 'Aquillm Default Dark'), ('aquillm_default_light', 'Aquillm Default Light'), ('aquillm_default_light_accessible_chat', 'Aquillm Default Light Accessible Chat'), ('aquillm_default_dark_accessible_chat', 'Aquillm Default Dark Accessible Chat'), ('high_contrast', 'High Contrast')], default='aquillm_default_dark', max_length=100)),
                ('font_family', models.CharField(choices=[('latin_modern_roman', 'Latin Modern Roman'), ('sans_serif', 'Sans-serif'), ('verdana', 'Verdana'), ('timesnewroman', 'Times New Roman'), ('opendyslexic', 'OpenDyslexic'), ('lexend', 'Lexend'), ('comicsans', 'Comic Sans')], default='sans_serif', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='aquillm.collection')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CollectionPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission', models.CharField(choices=[('VIEW', 'View'), ('EDIT', 'Edit'), ('MANAGE', 'Manage')], max_length=10)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='aquillm.collection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='collection',
            name='users',
            field=models.ManyToManyField(through='aquillm.CollectionPermission', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='HandwrittenNotesDocument',
            fields=[
                ('pkid', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('title', models.CharField(max_length=200)),
                ('full_text', models.TextField()),
                ('full_text_hash', models.CharField(db_index=True, max_length=64)),
                ('ingestion_date', models.DateTimeField(auto_now_add=True)),
                ('ingestion_complete', models.BooleanField(default=True)),
                ('image_file', models.ImageField(help_text='Upload an image of handwritten notes', upload_to='handwritten_notes/', validators=[django.core.validators.FileExtensionValidator(['png', 'jpg', 'jpeg'])])),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_documents', to='aquillm.collection')),
                ('ingested_by', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-ingestion_date', 'title'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PDFDocument',
            fields=[
                ('pkid', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('title', models.CharField(max_length=200)),
                ('full_text', models.TextField()),
                ('full_text_hash', models.CharField(db_index=True, max_length=64)),
                ('ingestion_date', models.DateTimeField(auto_now_add=True)),
                ('ingestion_complete', models.BooleanField(default=True)),
                ('pdf_file', models.FileField(max_length=500, upload_to='pdfs/', validators=[django.core.validators.FileExtensionValidator(['pdf'])])),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_documents', to='aquillm.collection')),
                ('ingested_by', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-ingestion_date', 'title'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RawTextDocument',
            fields=[
                ('pkid', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('title', models.CharField(max_length=200)),
                ('full_text', models.TextField()),
                ('full_text_hash', models.CharField(db_index=True, max_length=64)),
                ('ingestion_date', models.DateTimeField(auto_now_add=True)),
                ('ingestion_complete', models.BooleanField(default=True)),
                ('source_url', models.URLField(blank=True, max_length=2000, null=True)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_documents', to='aquillm.collection')),
                ('ingested_by', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-ingestion_date', 'title'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TeXDocument',
            fields=[
                ('pkid', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('title', models.CharField(max_length=200)),
                ('full_text', models.TextField()),
                ('full_text_hash', models.CharField(db_index=True, max_length=64)),
                ('ingestion_date', models.DateTimeField(auto_now_add=True)),
                ('ingestion_complete', models.BooleanField(default=True)),
                ('pdf_file', models.FileField(null=True, upload_to='pdfs/')),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_documents', to='aquillm.collection')),
                ('ingested_by', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-ingestion_date', 'title'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TextChunk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('start_position', models.PositiveIntegerField()),
                ('end_position', models.PositiveIntegerField()),
                ('start_time', models.FloatField(null=True)),
                ('chunk_number', models.PositiveIntegerField()),
                ('embedding', pgvector.django.vector.VectorField(blank=True, dimensions=1024, null=True)),
                ('doc_id', models.UUIDField(editable=False, validators=[aquillm.models.doc_id_validator])),
            ],
            options={
                'ordering': ['doc_id', 'chunk_number'],
                'indexes': [models.Index(fields=['doc_id', 'start_position', 'end_position'], name='aquillm_tex_doc_id_a7b188_idx'), pgvector.django.indexes.HnswIndex(ef_construction=64, fields=['embedding'], m=16, name='chunk_embedding_index', opclasses=['vector_l2_ops'])],
                'constraints': [models.UniqueConstraint(fields=('doc_id', 'start_position', 'end_position'), name='unique_chunk_position_per_document'), models.UniqueConstraint(fields=('doc_id', 'chunk_number'), name='uniqe_chunk_per_document')],
            },
        ),
        migrations.CreateModel(
            name='VTTDocument',
            fields=[
                ('pkid', models.BigAutoField(editable=False, primary_key=True, serialize=False)),
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('title', models.CharField(max_length=200)),
                ('full_text', models.TextField()),
                ('full_text_hash', models.CharField(db_index=True, max_length=64)),
                ('ingestion_date', models.DateTimeField(auto_now_add=True)),
                ('ingestion_complete', models.BooleanField(default=True)),
                ('audio_file', models.FileField(null=True, upload_to='stt_audio/', validators=[django.core.validators.FileExtensionValidator(['mp4', 'ogg', 'opus', 'm4a', 'aac'])])),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_documents', to='aquillm.collection')),
                ('ingested_by', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-ingestion_date', 'title'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WSConversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('convo', models.JSONField(blank=True, default=aquillm.llm.Conversation.get_empty_conversation, null=True)),
                ('name', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(editable=False)),
                ('updated_at', models.DateTimeField()),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ws_conversations', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddConstraint(
            model_name='collectionpermission',
            constraint=models.UniqueConstraint(fields=('user', 'collection'), name='unique_permission_constraint'),
        ),
        migrations.AlterUniqueTogether(
            name='collection',
            unique_together={('name', 'parent')},
        ),
        migrations.AddConstraint(
            model_name='handwrittennotesdocument',
            constraint=models.UniqueConstraint(fields=('collection', 'full_text_hash'), name='handwrittennotesdocument_document_collection_unique'),
        ),
        migrations.AddConstraint(
            model_name='pdfdocument',
            constraint=models.UniqueConstraint(fields=('collection', 'full_text_hash'), name='pdfdocument_document_collection_unique'),
        ),
        migrations.AddConstraint(
            model_name='rawtextdocument',
            constraint=models.UniqueConstraint(fields=('collection', 'full_text_hash'), name='rawtextdocument_document_collection_unique'),
        ),
        migrations.AddConstraint(
            model_name='texdocument',
            constraint=models.UniqueConstraint(fields=('collection', 'full_text_hash'), name='texdocument_document_collection_unique'),
        ),
        migrations.AddConstraint(
            model_name='vttdocument',
            constraint=models.UniqueConstraint(fields=('collection', 'full_text_hash'), name='vttdocument_document_collection_unique'),
        ),
    ]
